{"version":3,"sources":["Components/Dark/index.tsx","Components/Light/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Dark","doneList","handleDeleteDone","handleUnCheck","Pane","height","width","background","padding","majorScale","style","display","flexDirection","maxWidth","overflowY","margin","textAlign","Heading","paddingTop","size","color","length","slice","reverse","map","item","justifyContent","marginTop","Checkbox","marginRight","checked","isChecked","onChange","key","value","marginY","overflow","IconButton","icon","CrossIcon","onClick","Light","toDoList","handleDeleteTodo","handleCheck","textDecoration","textOverflow","whiteSpace","App","useState","setValue","setToDoList","setDoneList","handleAdd","e","preventDefault","trim","Math","random","toString","substr","toaster","warning","position","left","transform","onSubmit","Card","border","borderColor","TextInput","target","charAt","toUpperCase","placeholder","PlusIcon","font-size","right","top","zIndex","flex","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.959676c0.chunk.js","sourcesContent":["import {\r\n  Pane,\r\n  majorScale,\r\n  Heading,\r\n  TextInput,\r\n  IconButton,\r\n  PlusIcon,\r\n  Card,\r\n  Checkbox,\r\n  CrossIcon,\r\n  toaster,\r\n} from \"evergreen-ui\";\r\n\r\ntype LightProps = {\r\n  doneList: Array<{\r\n    key: string;\r\n    value: string;\r\n    isChecked: boolean;\r\n  }>;\r\n  handleDeleteDone: (key: string) => void;\r\n  handleUnCheck: (key: string, value: string) => void;\r\n};\r\n\r\nconst Dark = ({ doneList, handleDeleteDone, handleUnCheck }: LightProps) => {\r\n  return (\r\n    <Pane height='100vh' width='100%' background='gray900' padding={majorScale(4)}>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          height: \"100%\",\r\n          maxWidth: \"400px\",\r\n          overflowY: \"auto\",\r\n          margin: \"auto\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <Heading paddingTop={majorScale(8)} size={900} color='#FAFBFF'>\r\n          Done\r\n        </Heading>\r\n        {doneList.length\r\n          ? doneList\r\n              .slice(0)\r\n              .reverse()\r\n              .map((item) => {\r\n                return (\r\n                  <Pane display='flex' justifyContent='space-between' marginTop={majorScale(2)}>\r\n                    <div style={{ display: \"inline-flex\", textAlign: \"left\" }}>\r\n                      <Checkbox\r\n                        marginRight={majorScale(2)}\r\n                        checked={item.isChecked}\r\n                        onChange={() => handleUnCheck(item.key, item.value)}\r\n                      ></Checkbox>\r\n                      <Heading marginY='auto' overflow='hidden' width='300px' color='#FAFBFF'>\r\n                        {item.value}\r\n                      </Heading>\r\n                    </div>\r\n                    <IconButton icon={CrossIcon} onClick={() => handleDeleteDone(item.key)} marginY='auto' />\r\n                  </Pane>\r\n                );\r\n              })\r\n          : null}\r\n      </div>\r\n    </Pane>\r\n  );\r\n};\r\n\r\nexport default Dark;\r\n","import {\r\n  Pane,\r\n  majorScale,\r\n  Heading,\r\n  TextInput,\r\n  IconButton,\r\n  PlusIcon,\r\n  Card,\r\n  Checkbox,\r\n  CrossIcon,\r\n  toaster,\r\n} from \"evergreen-ui\";\r\n\r\ntype LightProps = {\r\n  toDoList: Array<{\r\n    key: string;\r\n    value: string;\r\n    isChecked: boolean;\r\n  }>;\r\n  handleDeleteTodo: (key: string) => void;\r\n  handleCheck: (key: string, value: string) => void;\r\n};\r\n\r\nconst Light = ({ toDoList, handleDeleteTodo, handleCheck }: LightProps) => {\r\n  return (\r\n    <Pane height='100vh' width='100%' background='gray50' padding={majorScale(4)}>\r\n      <div\r\n        style={{\r\n          color: \"#101840\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          height: \"100%\",\r\n          maxWidth: \"400px\",\r\n          overflowY: \"auto\",\r\n          margin: \"auto\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <Heading paddingTop={majorScale(8)} size={900}>\r\n          To Do\r\n        </Heading>\r\n        {toDoList.length\r\n          ? toDoList\r\n              .slice(0)\r\n              .reverse()\r\n              .map((item) => {\r\n                return (\r\n                  <Pane display='flex' justifyContent='space-between' marginTop={majorScale(2)}>\r\n                    <div style={{ display: \"inline-flex\", textAlign: \"left\" }}>\r\n                      <Checkbox\r\n                        marginRight={majorScale(2)}\r\n                        checked={item.isChecked}\r\n                        onChange={() => handleCheck(item.key, item.value)}\r\n                      ></Checkbox>\r\n                      <Heading\r\n                        marginY='auto'\r\n                        overflow='hidden'\r\n                        width='300px'\r\n                        style={{\r\n                          textDecoration: item.isChecked ? \"line-through\" : \"none\",\r\n                          textOverflow: \"ellipsis\",\r\n                          whiteSpace: \"nowrap\",\r\n                        }}\r\n                      >\r\n                        {item.value}\r\n                      </Heading>\r\n                    </div>\r\n                    <IconButton icon={CrossIcon} onClick={() => handleDeleteTodo(item.key)} marginY='auto' />\r\n                  </Pane>\r\n                );\r\n              })\r\n          : null}\r\n      </div>\r\n    </Pane>\r\n  );\r\n};\r\n\r\nexport default Light;\r\n","import { ChangeEvent, FormEvent, useState } from \"react\";\nimport {\n  Pane,\n  majorScale,\n  Heading,\n  TextInput,\n  IconButton,\n  PlusIcon,\n  Card,\n  Checkbox,\n  CrossIcon,\n  toaster,\n} from \"evergreen-ui\";\nimport Dark from \"./Components/Dark\";\nimport Light from \"./Components/Light\";\n\nconst App = () => {\n  const [value, setValue] = useState(\"\");\n  const [toDoList, setToDoList] = useState<\n    Array<{\n      key: string;\n      value: string;\n      isChecked: boolean;\n    }>\n  >([]);\n  const [doneList, setDoneList] = useState<\n    Array<{\n      key: string;\n      value: string;\n      isChecked: boolean;\n    }>\n  >([]);\n\n  const handleAdd = (e: FormEvent<HTMLElement>) => {\n    e.preventDefault();\n    if (value.trim() != \"\") {\n      setToDoList([...toDoList, { value: value, key: Math.random().toString(36).substr(2, 9), isChecked: false }]);\n      setValue(\"\");\n    } else toaster.warning(\"Input field is empty.\");\n  };\n\n  const handleDeleteTodo = (key: string) => setToDoList([...toDoList.filter((item) => item.key !== key)]);\n\n  const handleDeleteDone = (key: string) => setDoneList([...doneList.filter((item) => item.key !== key)]);\n\n  const handleCheck = (key: string, value: string) => {\n    setToDoList([...toDoList.filter((item) => item.key !== key)]);\n    setDoneList([...doneList, { value: value, key: key, isChecked: true }]);\n  };\n\n  const handleUnCheck = (key: string, value: string) => {\n    setDoneList([...doneList.filter((item) => item.key !== key)]);\n    setToDoList([...toDoList, { value: value, key: key, isChecked: false }]);\n  };\n\n  return (\n    <Pane display='flex' height='100vh'>\n      <Pane position='absolute' left='50%' transform='translate(-50%,24px)'>\n        <form onSubmit={handleAdd}>\n          <Card display='flex' border='default' borderColor='#101840' position='relative'>\n            <TextInput\n              width='100%'\n              height='50px'\n              onChange={(e: ChangeEvent<HTMLInputElement>) => setValue(e.target.value)}\n              value={value.charAt(0).toUpperCase() + value.slice(1)}\n              border='none'\n              placeholder='Add New Item'\n            />\n            <IconButton\n              icon={PlusIcon}\n              font-size='24px'\n              onClick={handleAdd}\n              border='none'\n              position='absolute'\n              right='9px'\n              top='9px'\n              zIndex={9}\n              style={{ color: \"#101840\" }}\n            />\n          </Card>\n        </form>\n      </Pane>\n      <Pane flex='1'>\n        <Light toDoList={toDoList} handleDeleteTodo={handleDeleteTodo} handleCheck={handleCheck} />\n      </Pane>\n      <Pane flex='1'>\n        <Dark doneList={doneList} handleDeleteDone={handleDeleteDone} handleUnCheck={handleUnCheck} />\n      </Pane>\n    </Pane>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}