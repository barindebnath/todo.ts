{"version":3,"sources":["Components/Dark/index.tsx","Components/Light/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Dark","doneList","handleDeleteDone","handleUnCheck","Pane","flex","background","padding","majorScale","style","display","flexDirection","maxWidth","margin","textAlign","Heading","paddingTop","size","color","length","slice","reverse","map","item","justifyContent","marginTop","Checkbox","marginRight","checked","isChecked","onChange","key","value","marginY","overflow","max-width","IconButton","icon","CrossIcon","borderRadius","borderColor","backgroundColor","onClick","Light","toDoList","handleDeleteTodo","handleCheck","textDecoration","textOverflow","whiteSpace","App","useState","setValue","setToDoList","setDoneList","handleAdd","e","preventDefault","trim","Math","random","toString","substr","toaster","warning","Container","Form","onSubmit","Card","border","position","TextInput","min-width","height","target","charAt","toUpperCase","placeholder","PlusIcon","font-size","right","top","zIndex","filter","styled","div","form","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RA6DeA,EAjDF,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,iBAAkBC,EAAgC,EAAhCA,cAC1C,OACE,cAACC,EAAA,EAAD,CAAMC,KAAK,IAAIC,WAAW,UAAUC,QAASC,YAAW,GAAxD,SACE,sBACEC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,SAAU,QACVC,OAAQ,OACRC,UAAW,UANf,UASE,eAACC,EAAA,EAAD,CAASC,WAAYR,YAAW,GAAIS,KAAM,IAAKC,MAAM,UAArD,kBACQjB,EAASkB,OAAT,YAAuBlB,EAASkB,QAAW,QAElDlB,EAASkB,OACNlB,EACGmB,MAAM,GACNC,UACAC,KAAI,SAACC,GACJ,OACE,eAACnB,EAAA,EAAD,CAAMM,QAAQ,OAAOc,eAAe,gBAAgBC,UAAWjB,YAAW,GAA1E,UACE,sBAAKC,MAAO,CAAEC,QAAS,cAAeI,UAAW,QAAjD,UACE,cAACY,EAAA,EAAD,CACEC,YAAanB,YAAW,GACxBoB,QAASL,EAAKM,UACdC,SAAU,kBAAM3B,EAAcoB,EAAKQ,IAAKR,EAAKS,UAE/C,cAACjB,EAAA,EAAD,CAASkB,QAAQ,OAAOC,SAAS,SAASC,YAAU,QAAQjB,MAAM,UAAlE,SACGK,EAAKS,WAGV,cAACI,EAAA,EAAD,CACEC,KAAMC,IACNC,aAAa,MACbC,YAAY,UACZC,gBAAgB,UAChBC,QAAS,kBAAMxC,EAAiBqB,EAAKQ,MACrCE,QAAQ,eAKlB,WCcGU,EAzDD,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,SAAUC,EAAgD,EAAhDA,iBAAkBC,EAA8B,EAA9BA,YAC3C,OACE,cAAC1C,EAAA,EAAD,CAAMC,KAAK,IAAIC,WAAW,SAASC,QAASC,YAAW,GAAvD,SACE,sBACEC,MAAO,CACLS,MAAO,UACPR,QAAS,OACTC,cAAe,SACfC,SAAU,QACVC,OAAQ,OACRC,UAAW,UAPf,UAUE,eAACC,EAAA,EAAD,CAASC,WAAYR,YAAW,GAAIS,KAAM,IAA1C,mBACS2B,EAASzB,OAAT,YAAuByB,EAASzB,QAAW,QAEnDyB,EAASzB,OACNyB,EACGxB,MAAM,GACNC,UACAC,KAAI,SAACC,GACJ,OACE,eAACnB,EAAA,EAAD,CAAMM,QAAQ,OAAOc,eAAe,gBAAgBC,UAAWjB,YAAW,GAA1E,UACE,sBAAKC,MAAO,CAAEC,QAAS,cAAeI,UAAW,QAAjD,UACE,cAACY,EAAA,EAAD,CACEC,YAAanB,YAAW,GACxBoB,QAASL,EAAKM,UACdC,SAAU,kBAAMgB,EAAYvB,EAAKQ,IAAKR,EAAKS,UAE7C,cAACjB,EAAA,EAAD,CACEkB,QAAQ,OACRC,SAAS,SACTC,YAAU,QACV1B,MAAO,CACLsC,eAAgBxB,EAAKM,UAAY,eAAiB,OAClDmB,aAAc,WACdC,WAAY,UAPhB,SAUG1B,EAAKS,WAGV,cAACI,EAAA,EAAD,CACEC,KAAMC,IACNC,aAAa,MACbG,QAAS,kBAAMG,EAAiBtB,EAAKQ,MACrCE,QAAQ,eAKlB,WCaGiB,EAtEH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOnB,EAAP,KAAcoB,EAAd,KACA,EAAgCD,mBAM9B,IANF,mBAAOP,EAAP,KAAiBS,EAAjB,KAOA,EAAgCF,mBAM9B,IANF,mBAAOlD,EAAP,KAAiBqD,EAAjB,KAQMC,EAAY,SAACC,GACjBA,EAAEC,iBACkB,IAAhBzB,EAAM0B,QACRL,EAAY,GAAD,mBAAKT,GAAL,CAAe,CAAEZ,MAAOA,EAAOD,IAAK4B,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,GAAIjC,WAAW,MACnGuB,EAAS,KACJW,IAAQC,QAAQ,0BAiBzB,OACE,eAACC,EAAD,WACE,cAACC,EAAD,CAAMC,SAAUZ,EAAhB,SACE,eAACa,EAAA,EAAD,CAAM1D,QAAQ,OAAO2D,OAAO,UAAU7B,YAAY,UAAU8B,SAAS,WAArE,UACE,cAACC,EAAA,EAAD,CACEC,YAAU,OACVC,OAAO,OACP3C,SAAU,SAAC0B,GAAD,OAAsCJ,EAASI,EAAEkB,OAAO1C,QAClEA,MAAOA,EAAM2C,OAAO,GAAGC,cAAgB5C,EAAMZ,MAAM,GACnDiD,OAAO,OACPQ,YAAY,iBAEd,cAACzC,EAAA,EAAD,CACEC,KAAMyC,IACNC,YAAU,OACVrC,QAASa,EACTc,OAAO,OACPC,SAAS,WACTU,MAAM,MACNC,IAAI,MACJC,OAAQ,EACRzE,MAAO,CAAES,MAAO,kBAItB,cAAC,EAAD,CAAO0B,SAAUA,EAAUC,iBAvCN,SAACd,GAAD,OAAiBsB,EAAY,YAAIT,EAASuC,QAAO,SAAC5D,GAAD,OAAUA,EAAKQ,MAAQA,QAuC9Be,YAnC/C,SAACf,EAAaC,GAChCqB,EAAY,YAAIT,EAASuC,QAAO,SAAC5D,GAAD,OAAUA,EAAKQ,MAAQA,OACvDuB,EAAY,GAAD,mBAAKrD,GAAL,CAAe,CAAE+B,MAAOA,EAAOD,IAAKA,EAAKF,WAAW,SAkC7D,cAAC,EAAD,CAAM5B,SAAUA,EAAUC,iBAtCL,SAAC6B,GAAD,OAAiBuB,EAAY,YAAIrD,EAASkF,QAAO,SAAC5D,GAAD,OAAUA,EAAKQ,MAAQA,QAsC/B5B,cA/B5C,SAAC4B,EAAaC,GAClCsB,EAAY,YAAIrD,EAASkF,QAAO,SAAC5D,GAAD,OAAUA,EAAKQ,MAAQA,OACvDsB,EAAY,GAAD,mBAAKT,GAAL,CAAe,CAAEZ,MAAOA,EAAOD,IAAKA,EAAKF,WAAW,aAoC7DoC,EAAYmB,IAAOC,IAAV,6JASTnB,EAAOkB,IAAOE,KAAV,2HCzEKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.47dbd6e0.chunk.js","sourcesContent":["import { Pane, majorScale, Heading, IconButton, Checkbox, CrossIcon } from \"evergreen-ui\";\r\n\r\ntype LightProps = {\r\n  doneList: Array<{\r\n    key: string;\r\n    value: string;\r\n    isChecked: boolean;\r\n  }>;\r\n  handleDeleteDone: (key: string) => void;\r\n  handleUnCheck: (key: string, value: string) => void;\r\n};\r\n\r\nconst Dark = ({ doneList, handleDeleteDone, handleUnCheck }: LightProps) => {\r\n  return (\r\n    <Pane flex='1' background='gray900' padding={majorScale(4)}>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          maxWidth: \"400px\",\r\n          margin: \"auto\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <Heading paddingTop={majorScale(8)} size={900} color='#FAFBFF'>\r\n          Done {doneList.length ? `: ${doneList.length}` : null}\r\n        </Heading>\r\n        {doneList.length\r\n          ? doneList\r\n              .slice(0)\r\n              .reverse()\r\n              .map((item) => {\r\n                return (\r\n                  <Pane display='flex' justifyContent='space-between' marginTop={majorScale(2)}>\r\n                    <div style={{ display: \"inline-flex\", textAlign: \"left\" }}>\r\n                      <Checkbox\r\n                        marginRight={majorScale(2)}\r\n                        checked={item.isChecked}\r\n                        onChange={() => handleUnCheck(item.key, item.value)}\r\n                      ></Checkbox>\r\n                      <Heading marginY='auto' overflow='hidden' max-width='300px' color='#FAFBFF'>\r\n                        {item.value}\r\n                      </Heading>\r\n                    </div>\r\n                    <IconButton\r\n                      icon={CrossIcon}\r\n                      borderRadius='50%'\r\n                      borderColor='#FAFBFF'\r\n                      backgroundColor='#101840'\r\n                      onClick={() => handleDeleteDone(item.key)}\r\n                      marginY='auto'\r\n                    />\r\n                  </Pane>\r\n                );\r\n              })\r\n          : null}\r\n      </div>\r\n    </Pane>\r\n  );\r\n};\r\n\r\nexport default Dark;\r\n","import { Pane, majorScale, Heading, IconButton, Checkbox, CrossIcon } from \"evergreen-ui\";\r\n\r\ntype LightProps = {\r\n  toDoList: Array<{\r\n    key: string;\r\n    value: string;\r\n    isChecked: boolean;\r\n  }>;\r\n  handleDeleteTodo: (key: string) => void;\r\n  handleCheck: (key: string, value: string) => void;\r\n};\r\n\r\nconst Light = ({ toDoList, handleDeleteTodo, handleCheck }: LightProps) => {\r\n  return (\r\n    <Pane flex='1' background='gray50' padding={majorScale(4)}>\r\n      <div\r\n        style={{\r\n          color: \"#101840\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          maxWidth: \"400px\",\r\n          margin: \"auto\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <Heading paddingTop={majorScale(8)} size={900}>\r\n          To Do {toDoList.length ? `: ${toDoList.length}` : null}\r\n        </Heading>\r\n        {toDoList.length\r\n          ? toDoList\r\n              .slice(0)\r\n              .reverse()\r\n              .map((item) => {\r\n                return (\r\n                  <Pane display='flex' justifyContent='space-between' marginTop={majorScale(2)}>\r\n                    <div style={{ display: \"inline-flex\", textAlign: \"left\" }}>\r\n                      <Checkbox\r\n                        marginRight={majorScale(2)}\r\n                        checked={item.isChecked}\r\n                        onChange={() => handleCheck(item.key, item.value)}\r\n                      ></Checkbox>\r\n                      <Heading\r\n                        marginY='auto'\r\n                        overflow='hidden'\r\n                        max-width='300px'\r\n                        style={{\r\n                          textDecoration: item.isChecked ? \"line-through\" : \"none\",\r\n                          textOverflow: \"ellipsis\",\r\n                          whiteSpace: \"nowrap\",\r\n                        }}\r\n                      >\r\n                        {item.value}\r\n                      </Heading>\r\n                    </div>\r\n                    <IconButton\r\n                      icon={CrossIcon}\r\n                      borderRadius='50%'\r\n                      onClick={() => handleDeleteTodo(item.key)}\r\n                      marginY='auto'\r\n                    />\r\n                  </Pane>\r\n                );\r\n              })\r\n          : null}\r\n      </div>\r\n    </Pane>\r\n  );\r\n};\r\n\r\nexport default Light;\r\n","import { ChangeEvent, FormEvent, useState } from \"react\";\nimport { Pane, TextInput, IconButton, PlusIcon, Card, toaster } from \"evergreen-ui\";\nimport styled from \"styled-components\";\nimport Dark from \"./Components/Dark\";\nimport Light from \"./Components/Light\";\n\nconst App = () => {\n  const [value, setValue] = useState(\"\");\n  const [toDoList, setToDoList] = useState<\n    Array<{\n      key: string;\n      value: string;\n      isChecked: boolean;\n    }>\n  >([]);\n  const [doneList, setDoneList] = useState<\n    Array<{\n      key: string;\n      value: string;\n      isChecked: boolean;\n    }>\n  >([]);\n\n  const handleAdd = (e: FormEvent<HTMLElement>) => {\n    e.preventDefault();\n    if (value.trim() != \"\") {\n      setToDoList([...toDoList, { value: value, key: Math.random().toString(36).substr(2, 9), isChecked: false }]);\n      setValue(\"\");\n    } else toaster.warning(\"Input field is empty.\");\n  };\n\n  const handleDeleteTodo = (key: string) => setToDoList([...toDoList.filter((item) => item.key !== key)]);\n\n  const handleDeleteDone = (key: string) => setDoneList([...doneList.filter((item) => item.key !== key)]);\n\n  const handleCheck = (key: string, value: string) => {\n    setToDoList([...toDoList.filter((item) => item.key !== key)]);\n    setDoneList([...doneList, { value: value, key: key, isChecked: true }]);\n  };\n\n  const handleUnCheck = (key: string, value: string) => {\n    setDoneList([...doneList.filter((item) => item.key !== key)]);\n    setToDoList([...toDoList, { value: value, key: key, isChecked: false }]);\n  };\n\n  return (\n    <Container>\n      <Form onSubmit={handleAdd}>\n        <Card display='flex' border='default' borderColor='#101840' position='relative'>\n          <TextInput\n            min-width='100%'\n            height='50px'\n            onChange={(e: ChangeEvent<HTMLInputElement>) => setValue(e.target.value)}\n            value={value.charAt(0).toUpperCase() + value.slice(1)}\n            border='none'\n            placeholder='Add New Item'\n          />\n          <IconButton\n            icon={PlusIcon}\n            font-size='24px'\n            onClick={handleAdd}\n            border='none'\n            position='absolute'\n            right='9px'\n            top='9px'\n            zIndex={9}\n            style={{ color: \"#101840\" }}\n          />\n        </Card>\n      </Form>\n      <Light toDoList={toDoList} handleDeleteTodo={handleDeleteTodo} handleCheck={handleCheck} />\n      <Dark doneList={doneList} handleDeleteDone={handleDeleteDone} handleUnCheck={handleUnCheck} />\n    </Container>\n  );\n};\n\nexport default App;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  min-height: 100vh;\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nconst Form = styled.form`\n  position: absolute;\n  left: 50%;\n  transform: translate(-50%, 24px);\n  max-width: 400px;\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}